Meteor X-Ray
------------

X-Ray visualizes alignments and scores of one or more decoding runs against a
set of reference translations.  When scoring translation hypotheses with Meteor,
use the -writeAlignments option to produce alignment files annotated with Meteor
statistics.  X-Ray uses these files to produce graphical representations of
alignment matrices and score distributions via XeTeX and Gnuplot.  Final output
is in PDF form with intermediate LaTeX and plot files preserved for easy
inclusion in reports and presentations.


Requirements:

Earlier versions may work, though the following are recommended:

Python 2.6 (http://www.python.org/)

XeTeX 2009 (http://www.tug.org/texlive/)

Gnuplot 4.4 (http://www.gnuplot.info/)

GNU Unifont (http://unifoundry.com/unifont.html)
(Optional, used for non-western languages)

Setup:

If XeTeX and Gnuplot are installed somewhere other than /usr/bin, edit
xray/Generation.py to include the correct locations:

xelatex_cmd = '/usr/bin/xelatex'

gnuplot_cmd = '/usr/bin/gnuplot'


Usage:

Running X-Ray with no arguments produces the following:

$ python xray/xray.py

MX: X-Ray your translation output
Usage: xray.py [options] <align.out> [align.out2 ...]

Options:
  -h, --help            show this help message and exit
  -c, --compare         compare alignments of two result sets (only first 2
                        input files used)
  -n, --no-align        do not visualize alignments
  -x MAX, --max=MAX     max alignments to sample (default use all)
  -p PRE, --prefix=PRE  prefix for output files (default mx)
  -l LBL, --label=LBL   optional system label list, comma separated:
                        label1,label2,...
  -u, --unifont         use unifont (use for non-western languages)


Example usage:

Score and visualize the hypotheses from system1 and system2 in the example/xray
directory.

Score system1 with Meteor:
-norm: tokenize and normalize before scoring
-writeAlignments: write out sentence alignments used to calculate Meteor scores
-f system1: write alignments to system1-align.out

$ java -XX:+UseCompressedOops -Xmx2G -jar meteor-*.jar \
  example/xray/system1.hyp example/xray/reference \
  -norm -writeAlignments -f system1

Visualize alignments and scores of system1 with Meteor X-Ray:
-p system1: prefix output files with 'system1'
system1-align.out: output from Meteor

$ python xray/xray.py -p system1 system1-align.out

Files produced:
system1-align-system-1.pdf: visualized Meteor alignments for each sentence
system1-score.pdf: visualized distributions of Meteor statistics
system1-files: LaTeX and gnuplot files used to produce PDFs

Score system2 with Meteor:

$ java -XX:+UseCompressedOops -Xmx2G -jar meteor-*.jar \
  example/xray/system2.hyp example/xray/reference \
  -norm -writeAlignments -f system2

Compare performances of system1 and system2:
-c: compare two Meteor outputs
-p compare: prefix output with 'compare'

$ python xray/xray.py -c -p compare system1-align.out system2-align.out

Files produced:
compare-align.pdf: visualized alignments for both systems overlain
compare-score.pdf: score distributions for both systems
compare-files: LaTeX and gnuplot files


Additional systems:

To compare any number of decoding runs, score each with Meteor (as above) and
pass the align.out files to X-Ray.  Without the -c flag, X-Ray will generate
individual alignment matrices for each system and a single score PDF with score
distributions for all systems.  This is useful for comparing many configurations
of the same system.
